{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","inputValue","outputDisplay","equal","equalClickedHandler","_this","console","log","inputValueHandler","result","opsRegex","ops","a","b","checkEqual","slice","positionOperator","match","search","currentOperator","firstNum","parseFloat","substring","secondNum","setState","e","percentageHandler","percent","negativePositiveHandler","num","resetHandler","_this2","this","react_default","createElement","className","id","onClick","Component","Boolean","window","location","hostname","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.6793a56b.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nimport './App.scss';\n\nclass App extends Component {\n  state = {\n    inputValue: '0',\n    outputDisplay: '',\n    equal: false\n  }\n\n  equalClickedHandler = () => {\n    if (this.state.outputDisplay !== ''){\n      console.log(\"you clicked on =\");\n    }\n    \n    this.inputValueHandler('='); // updates the display with = sign\n\n    const opsRegex = /\\+|-|\\*|\\//gm; // Operators regex\n\n    const ops = { // functions applying the operators\n      '+': (a, b) => a + b, \n      '-': (a, b) => a - b, \n      '*': (a, b) => a * b, \n      '/': (a, b) => a / b\n    };\n\n    const checkEqual = this.state.equal; \n\n    const outputDisplay = this.state.outputDisplay.slice(); \n\n    const operatorExistArray = outputDisplay.match(opsRegex);\n\n    let positionOperator = outputDisplay.search(opsRegex); \n\n    let currentOperator = outputDisplay[positionOperator]; \n\n    let firstNum = parseFloat(outputDisplay.substring(0,positionOperator));\n\n    let secondNum = parseFloat(outputDisplay.substring(positionOperator+1));\n\n    let result;\n    if (currentOperator === '+'){\n      result = (ops['+'](firstNum,secondNum));\n    }\n    else if (currentOperator === '-'){\n      result = (ops['-'](firstNum,secondNum));\n    }\n    else if (currentOperator === '*'){\n      result = (ops['*'](firstNum,secondNum));\n    }\n    else if (currentOperator === '/'){\n      result = (ops['/'](firstNum,secondNum));\n    }\n\n    this.setState({ \n      equal: !checkEqual,\n      inputValue: result, \n      outputDisplay: outputDisplay + '=' + result \n    })\n  }\n\n  inputValueHandler = (e) => {\n    const outputDisplay = this.state.outputDisplay.slice();\n\n    if (!this.state.equal){\n      if (outputDisplay[0] === '0'){\n        outputDisplay.slice(1);\n      }\n      this.setState({ \n        outputDisplay: outputDisplay + e,\n        inputValue: e\n      })\n    } else {\n      this.setState({ \n        outputDisplay: e,\n        inputValue: e,\n        equal: false\n      })\n    }\n  }\n\n  percentageHandler = () => {\n    const percent = this.state.inputValue.slice();\n    const outputDisplay = this.state.outputDisplay.slice();\n    this.setState({\n      inputValue: percent/100,\n      outputDisplay: outputDisplay + percent/100\n    })\n  }\n\n  negativePositiveHandler = (num) => {\n    this.setState({ inputValue: -num })\n    console.log('you clicked +/-: ' + num)\n  }\n\n  resetHandler = () => this.setState({ outputDisplay: [] , inputValue: 0});\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div id=\"calculator\">\n          <div id=\"display-flex\">\n            <span id=\"output\">{this.state.outputDisplay}</span>\n            <span id=\"display\">{this.state.inputValue}</span>\n          </div>\n            \n          <div id=\"pad\">\n            <button id=\"clear\" className=\"dark\" onClick={this.resetHandler}>AC</button>\n            <button id=\"plus-negative\" className=\"dark\" onClick={() => this.negativePositiveHandler(this.state.inputValue)}>+/-</button>\n            <button id=\"percentage\" className=\"dark\" onClick={this.percentageHandler}>%</button>\n            <button id=\"divide\" onClick={ () => this.inputValueHandler('/')}>/</button>\n            <button id=\"seven\" className=\"number\" onClick={ () => this.inputValueHandler('7')}>7</button>\n            <button id=\"eight\" className=\"number\" onClick={ () => this.inputValueHandler('8')}>8</button>\n            <button id=\"nine\" className=\"number\" onClick={ () => this.inputValueHandler('9')}>9</button>\n            <button id=\"multiply\" onClick={ () => this.inputValueHandler('*')}>x</button>\n            <button id=\"four\" className=\"number\" onClick={ () => this.inputValueHandler('4')}>4</button> \n            <button id=\"five\" className=\"number\" onClick={ () => this.inputValueHandler('5')}>5</button>\n            <button id=\"six\" className=\"number\" onClick={ () => this.inputValueHandler('6')}>6</button>\n            <button id=\"subtract\" onClick={ () => this.inputValueHandler('-')}>-</button>\n            <button id=\"one\" className=\"number\" onClick={ () => this.inputValueHandler('1')}>1</button>\n            <button id=\"two\" className=\"number\" onClick={ () => this.inputValueHandler('2')}>2</button>\n            <button id=\"three\" className=\"number\" onClick={ () => this.inputValueHandler('3')}>3</button>\n            <button id=\"add\" onClick={ () => this.inputValueHandler('+')}>+</button>\n            <button id=\"zero\" className=\"number\" onClick={ () => this.inputValueHandler('0')}>0</button>\n            <button id=\"decimal\" className=\"number\" onClick={ () => this.inputValueHandler('.')}>.</button>\n            <button id=\"equals\" onClick={this.equalClickedHandler}>=</button>\n          </div>\n\n        </div>\n        {/* <span id=\"author\">Designed and Coded by <a href=\"https://alexdisdier.fr\" target=\"_blank\" rel=\"noopener noreferrer\">Alex Disdier</a></span> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}